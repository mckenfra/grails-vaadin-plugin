The Vaadin plugin adopts the Grails convention of structuring an application into
Controllers and Views. However, since Vaadin is an AJAX-based framework
rather than a conventional Request-Response framework, we do not map
*URLs* to controllers but instead map *Fragments* to controllers.

As an example, say we want to create a screen for displaying a list of books.
In Grails, we would create a @BookController.groovy@ file containing a @list()@ method,
and a @book/list.gsp@ file. This would then be accessible from a browser via
@http://localhost:8080/myapp/book/list@

With the Vaadin plugin, we do exactly the same thing. We create a @BookVaadinController.groovy@
file containing a @list()@ method, and a @book-vaadin/list.gsp@ file. This is then accessible
from a browser via @http://localhost:8080/myapp#book/list@. Note the @'#'@ in the URL to denote
the fragment! 

{note}
The naming convention for Vaadin controllers is important - the class name
must end with @VaadinController@.

Note that this method of identifying artefacts through the use of standard naming
conventions is very common in Grails!
{note}

