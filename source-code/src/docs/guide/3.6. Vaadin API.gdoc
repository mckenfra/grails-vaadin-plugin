The Vaadin plugin automatically injects an API into an application's Vaadin classes.
The injected API is as follows:

h3. All Vaadin Classes

{table}
 *Field* | *Description*
 *application* | Gets the Vaadin [Application|http://vaadin.com/api/com/vaadin/Application.html] object for this session.
 *dispatcher* | Can be used to [dispatch|api:org.grails.plugin.vaadin.VaadinDispatcher] requests to display different Vaadin pages.
 *getBean()* | Specify a Spring bean to retrieve by name.
{table}

{note}
A class is considered a Vaadin class if it meets the following requirements:

* Exists under the @grails-app@ directory

* Has a name ending @VaadinController@ or has the word @vaadin@ in its package name, or the package name of any of its superclasses.
{note}

h3. Vaadin Controllers

{table}
 *Field* | *Description*
 *flash* | Gets a Grails-like [flash|http://grails.org/doc/latest/ref/Tag%20Libraries/flash.html] object for the current 'request'.
 *message()* | Provides same functionality as the Grails [g:message|http://grails.org/doc/latest/ref/Tags/message.html] tag.
 *params* | Gets a Grails-like [params|http://grails.org/doc/latest/ref/Tag%20Libraries/params.html] map for the current 'request'.
 *redirect* | Mimics Grails's [redirect|http://grails.org/doc/latest/ref/Controllers/redirect.html] function for controllers
 *render* | Mimics Grails's [render|http://grails.org/doc/latest/ref/Controllers/render.html] function for controllers
{table}

Please consult the Vaadin Plugin [API docs|api:index] for more information.

h3. Preventing API Injection

You can add the annotation @\@NoVaadinAPI@ to any class in your application,
and this will prevent the above API from being injected.

To create a Vaadin Application without the API injection for any classes, and
without the controller-view dispatching mechanism, just subclass
@com.vaadin.Application@ in your Vaadin Application class, instead of
@org.grails.plugin.vaadin.VaadinApplication@
