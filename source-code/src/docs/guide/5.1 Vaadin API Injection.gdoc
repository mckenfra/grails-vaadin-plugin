The Vaadin plugin automatically injects an API into an application's Vaadin classes.
The injected API is as follows:

h3. All Vaadin Classes

{table}
 *Field* | *Description*
 *application* | Gets the @com.vaadin.Application@ object for this session.
 *flash* | Gets a Grails-like 'flash' object for the current 'request'.
 *message()* | Provides same functionality as the Grails @g:message@ tag.
 *getBean()* | Specify a Spring bean to retrieve by name.
 *dispatcher* | Use this to dispatch requests to display different Vaadin pages.
{table}

h3. Vaadin Controllers

{table}
 *Field* | *Description*
 *params* | Gets params map for the current 'request'.
 *redirect* | Mimics Grails's redirect function for controllers
 *render* | Mimics Grails's render function for controllers
{table}

h3. Vaadin Views

{table}
 *Field* | *Description*
 *params* | Gets params map for the current 'request'.
 *model* | Gets the model set by the controller for the current 'request'
{table}

Please consult the GroovyDocs for more information.

h3. Preventing API Injection

You can add the annotation @\@NoVaadinAPI@ to any class in your application,
and this will prevent the above API from being injected.

{note}
The above API is only injected into your Vaadin classes if your main Application
class subclasses @org.grails.plugin.vaadin.VaadinApplication@. The converse of this
is, if you don't want any of the API injection features, just subclass
@com.vaadin.Application@ directly in you main Application class.
{note}