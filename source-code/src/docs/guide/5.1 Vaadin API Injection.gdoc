The Vaadin plugin automatically injects an API into an application's Vaadin classes.
The injected API is as follows:

h3. All Vaadin Classes

{table}
 *Field* | *Description*
 *application* | Gets the Vaadin [Application|http://vaadin.com/api/com/vaadin/Application.html] object for this session.
 *flash* | Gets a Grails-like [flash|http://grails.org/doc/latest/ref/Tag%20Libraries/flash.html] object for the current 'request'.
 *message()* | Provides same functionality as the Grails [g:message|http://grails.org/doc/latest/ref/Tags/message.html] tag.
 *getBean()* | Specify a Spring bean to retrieve by name.
 *dispatcher* | Can be used to dispatch requests to display different Vaadin pages.
{table}

h3. Vaadin Controllers

{table}
 *Field* | *Description*
 *params* | Gets a Grails-like [params|http://grails.org/doc/latest/ref/Tag%20Libraries/params.html] map for the current 'request'.
 *redirect* | Mimics Grails's [redirect|http://grails.org/doc/latest/ref/Controllers/redirect.html] function for controllers
 *render* | Mimics Grails's [render|http://grails.org/doc/latest/ref/Controllers/render.html] function for controllers
{table}

Please consult the Vaadin Plugin API docs for more information.

h3. Preventing API Injection

You can add the annotation @\@NoVaadinAPI@ to any class in your application,
and this will prevent the above API from being injected.

{note}
The above API is only injected into your Vaadin classes if your main Application
class subclasses @org.grails.plugin.vaadin.VaadinApplication@. The converse of this
is, if you don't want any of the API injection features, just subclass
@com.vaadin.Application@ directly in you main Application class.
{note}