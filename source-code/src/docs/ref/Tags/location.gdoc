h1. location

h2. Purpose

Adds the tag's body to the specified location in the parent container.

h2. Examples

Take a GSP layout template called @/grails-app/views/layouts/greetinglayout.gsp@ with the following content:  

{code:java}
<h1>Greeting<h1>
<div location="mygreeting"></div>
{code}

This could then be applied as a layout template for another GSP, like so:

{code:java}
<v:layout name="greetinglayout">
  <v:location name="mygreeting">
    <div>Hello World!</div>
  </v:location>
</v:label>
{code}

The resulting HTML would (effectively) be:

{code:java}
<h1>Greeting<h1>
<div location="mygreeting"><div>Hello World!</div></div>
{code}

{note}
This is an indication of the type of HTML that would be created, but it is not
exact as Vaadin has its own rules for rendering CustomLayout components.
{note}

h2. Description

This tag should be always be used with the [layout|Tags] tag, for constructing GSPs
using layout templates.

h4. Body

* Can contain any GSP content.

h4. Attributes

h5. Specific

* @name@ or @location@ (required) The location slot in the parent container to which this GSP content should be added.

h5. General 

* @var@ (optional) Uses Grails's [set|http://grails.org/doc/latest/ref/Tags/set.html] tag to set the value of the specified variable to be this component.

* @class@ (optional) The CSS class name to add to the component using the addStyleName() method

* @sizeUndefined@ (optional) Calls setSizeUndefined() on the component. (Attribute value is ignored)

* @sizeFull@ (optional) Calls setSizeFull() on the component. (Attribute value is ignored)

* @wrapperClass@, @wrapperStyle@ (optional) Special [styling|Tags] for wrapper @<div>@.

{note}
See Vaadin [CustomLayout|http://vaadin.com/api/com/vaadin/ui/CustomLayout.html] API docs for full list of allowed attributes.
{note}